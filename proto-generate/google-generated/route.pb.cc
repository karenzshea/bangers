// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "route.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

namespace {

const ::google::protobuf::Descriptor* Waypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Waypoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Step_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Step_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lane_reflection_ = NULL;
const ::google::protobuf::Descriptor* Maneuver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Maneuver_reflection_ = NULL;
const ::google::protobuf::Descriptor* Leg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Leg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Route_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Route_reflection_ = NULL;
const ::google::protobuf::Descriptor* Directions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Directions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_route_2eproto() {
  protobuf_AddDesc_route_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "route.proto");
  GOOGLE_CHECK(file != NULL);
  Waypoint_descriptor_ = file->message_type(0);
  static const int Waypoint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, street_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, side_of_street_),
  };
  Waypoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Waypoint_descriptor_,
      Waypoint::default_instance_,
      Waypoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Waypoint));
  BoundingBox_descriptor_ = file->message_type(1);
  static const int BoundingBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, min_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, min_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, max_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, max_lon_),
  };
  BoundingBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundingBox_descriptor_,
      BoundingBox::default_instance_,
      BoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundingBox));
  StreetName_descriptor_ = file->message_type(2);
  static const int StreetName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetName, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetName, is_route_number_),
  };
  StreetName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreetName_descriptor_,
      StreetName::default_instance_,
      StreetName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreetName));
  Step_descriptor_ = file->message_type(3);
  static const int Step_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, geometry_index_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, geometry_index_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, incoming_maneuver_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, outgoing_maneuver_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, street_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, travel_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, travel_mode_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, driving_side_),
  };
  Step_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Step_descriptor_,
      Step::default_instance_,
      Step_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Step, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Step));
  SignElement_descriptor_ = file->message_type(4);
  static const int SignElement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignElement, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignElement, is_route_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignElement, consecutive_count_),
  };
  SignElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignElement_descriptor_,
      SignElement::default_instance_,
      SignElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignElement));
  Sign_descriptor_ = file->message_type(5);
  static const int Sign_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, exit_numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, exit_onto_streets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, exit_toward_locations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, exit_names_),
  };
  Sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sign_descriptor_,
      Sign::default_instance_,
      Sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sign));
  Lane_descriptor_ = file->message_type(6);
  static const int Lane_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, indications_),
  };
  Lane_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lane_descriptor_,
      Lane::default_instance_,
      Lane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lane));
  Maneuver_descriptor_ = file->message_type(7);
  static const int Maneuver_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, geometry_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, incoming_bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, outgoing_bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, street_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, is_obvious_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, is_verbal_multi_cue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, text_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, verbal_transition_alert_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, verbal_pre_transition_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, verbal_post_transition_instruction_),
  };
  Maneuver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Maneuver_descriptor_,
      Maneuver::default_instance_,
      Maneuver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maneuver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Maneuver));
  Leg_descriptor_ = file->message_type(8);
  static const int Leg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, bounding_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, maneuvers_),
  };
  Leg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Leg_descriptor_,
      Leg::default_instance_,
      Leg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Leg));
  Route_descriptor_ = file->message_type(9);
  static const int Route_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, bounding_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, legs_),
  };
  Route_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Route_descriptor_,
      Route::default_instance_,
      Route_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Route));
  Directions_descriptor_ = file->message_type(10);
  static const int Directions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, waypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, bounding_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, language_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, status_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, uuid_),
  };
  Directions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Directions_descriptor_,
      Directions::default_instance_,
      Directions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Directions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Directions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_route_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Waypoint_descriptor_, &Waypoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundingBox_descriptor_, &BoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreetName_descriptor_, &StreetName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Step_descriptor_, &Step::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignElement_descriptor_, &SignElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sign_descriptor_, &Sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lane_descriptor_, &Lane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Maneuver_descriptor_, &Maneuver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Leg_descriptor_, &Leg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Route_descriptor_, &Route::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Directions_descriptor_, &Directions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_route_2eproto() {
  delete Waypoint::default_instance_;
  delete Waypoint_reflection_;
  delete BoundingBox::default_instance_;
  delete BoundingBox_reflection_;
  delete StreetName::default_instance_;
  delete StreetName_reflection_;
  delete Step::default_instance_;
  delete Step_reflection_;
  delete SignElement::default_instance_;
  delete SignElement_reflection_;
  delete Sign::default_instance_;
  delete Sign_reflection_;
  delete Lane::default_instance_;
  delete Lane_reflection_;
  delete Maneuver::default_instance_;
  delete Maneuver_reflection_;
  delete Leg::default_instance_;
  delete Leg_reflection_;
  delete Route::default_instance_;
  delete Route_reflection_;
  delete Directions::default_instance_;
  delete Directions_reflection_;
}

void protobuf_AddDesc_route_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013route.proto\022\010valhalla\"y\n\010Waypoint\022\013\n\003l"
    "at\030\001 \001(\002\022\013\n\003lon\030\002 \001(\002\022\014\n\004type\030\003 \001(\t\022\017\n\007b"
    "earing\030\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\016\n\006street\030\006 \001"
    "(\t\022\026\n\016side_of_street\030\007 \001(\t\"Q\n\013BoundingBo"
    "x\022\017\n\007min_lat\030\001 \001(\002\022\017\n\007min_lon\030\002 \001(\002\022\017\n\007m"
    "ax_lat\030\003 \001(\002\022\017\n\007max_lon\030\004 \001(\002\"3\n\nStreetN"
    "ame\022\014\n\004text\030\001 \001(\t\022\027\n\017is_route_number\030\002 \001"
    "(\010\"\227\002\n\004Step\022\020\n\010distance\030\001 \001(\002\022\020\n\010duratio"
    "n\030\002 \001(\r\022\034\n\024geometry_index_begin\030\003 \001(\r\022\032\n"
    "\022geometry_index_end\030\004 \001(\r\022\037\n\027incoming_ma"
    "neuver_index\030\005 \001(\r\022\037\n\027outgoing_maneuver_"
    "index\030\006 \001(\r\022*\n\014street_names\030\007 \003(\0132\024.valh"
    "alla.StreetName\022\023\n\013travel_mode\030\010 \001(\t\022\030\n\020"
    "travel_mode_type\030\t \001(\t\022\024\n\014driving_side\030\n"
    " \001(\t\"O\n\013SignElement\022\014\n\004text\030\001 \001(\t\022\027\n\017is_"
    "route_number\030\002 \001(\010\022\031\n\021consecutive_count\030"
    "\003 \001(\r\"\306\001\n\004Sign\022+\n\014exit_numbers\030\001 \003(\0132\025.v"
    "alhalla.SignElement\0220\n\021exit_onto_streets"
    "\030\002 \003(\0132\025.valhalla.SignElement\0224\n\025exit_to"
    "ward_locations\030\003 \003(\0132\025.valhalla.SignElem"
    "ent\022)\n\nexit_names\030\004 \003(\0132\025.valhalla.SignE"
    "lement\"-\n\004Lane\022\020\n\010is_valid\030\001 \001(\010\022\023\n\013indi"
    "cations\030\002 \003(\t\"\233\003\n\010Maneuver\022\014\n\004type\030\001 \001(\t"
    "\022\026\n\016geometry_index\030\002 \001(\r\022\030\n\020incoming_bea"
    "ring\030\003 \001(\r\022\030\n\020outgoing_bearing\030\004 \001(\r\022*\n\014"
    "street_names\030\005 \003(\0132\024.valhalla.StreetName"
    "\022\034\n\004sign\030\006 \001(\0132\016.valhalla.Sign\022\034\n\004lane\030\007"
    " \001(\0132\016.valhalla.Lane\022\022\n\nis_obvious\030\010 \001(\010"
    "\022\033\n\023is_verbal_multi_cue\030\t \001(\010\022\030\n\020text_in"
    "struction\030\n \001(\t\022+\n#verbal_transition_ale"
    "rt_instruction\030\013 \001(\t\022)\n!verbal_pre_trans"
    "ition_instruction\030\014 \001(\t\022*\n\"verbal_post_t"
    "ransition_instruction\030\r \001(\t\"\277\001\n\003Leg\022\017\n\007s"
    "ummary\030\001 \001(\t\022\020\n\010distance\030\002 \001(\002\022\020\n\010durati"
    "on\030\003 \001(\r\022+\n\014bounding_box\030\004 \001(\0132\025.valhall"
    "a.BoundingBox\022\020\n\010geometry\030\005 \001(\t\022\035\n\005steps"
    "\030\006 \003(\0132\016.valhalla.Step\022%\n\tmaneuvers\030\007 \003("
    "\0132\022.valhalla.Maneuver\"u\n\005Route\022\020\n\010distan"
    "ce\030\001 \001(\002\022\020\n\010duration\030\002 \001(\r\022+\n\014bounding_b"
    "ox\030\003 \001(\0132\025.valhalla.BoundingBox\022\033\n\004legs\030"
    "\004 \003(\0132\r.valhalla.Leg\"\342\001\n\nDirections\022%\n\tw"
    "aypoints\030\001 \003(\0132\022.valhalla.Waypoint\022\037\n\006ro"
    "utes\030\002 \003(\0132\017.valhalla.Route\022+\n\014bounding_"
    "box\030\003 \001(\0132\025.valhalla.BoundingBox\022\025\n\rlang"
    "uage_code\030\004 \001(\t\022\r\n\005units\030\005 \001(\t\022\023\n\013status"
    "_code\030\006 \001(\r\022\026\n\016status_message\030\007 \001(\t\022\014\n\004u"
    "uid\030\010 \001(\r", 1849);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "route.proto", &protobuf_RegisterTypes);
  Waypoint::default_instance_ = new Waypoint();
  BoundingBox::default_instance_ = new BoundingBox();
  StreetName::default_instance_ = new StreetName();
  Step::default_instance_ = new Step();
  SignElement::default_instance_ = new SignElement();
  Sign::default_instance_ = new Sign();
  Lane::default_instance_ = new Lane();
  Maneuver::default_instance_ = new Maneuver();
  Leg::default_instance_ = new Leg();
  Route::default_instance_ = new Route();
  Directions::default_instance_ = new Directions();
  Waypoint::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  StreetName::default_instance_->InitAsDefaultInstance();
  Step::default_instance_->InitAsDefaultInstance();
  SignElement::default_instance_->InitAsDefaultInstance();
  Sign::default_instance_->InitAsDefaultInstance();
  Lane::default_instance_->InitAsDefaultInstance();
  Maneuver::default_instance_->InitAsDefaultInstance();
  Leg::default_instance_->InitAsDefaultInstance();
  Route::default_instance_->InitAsDefaultInstance();
  Directions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_route_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_route_2eproto {
  StaticDescriptorInitializer_route_2eproto() {
    protobuf_AddDesc_route_2eproto();
  }
} static_descriptor_initializer_route_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Waypoint::kLatFieldNumber;
const int Waypoint::kLonFieldNumber;
const int Waypoint::kTypeFieldNumber;
const int Waypoint::kBearingFieldNumber;
const int Waypoint::kNameFieldNumber;
const int Waypoint::kStreetFieldNumber;
const int Waypoint::kSideOfStreetFieldNumber;
#endif  // !_MSC_VER

Waypoint::Waypoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Waypoint)
}

void Waypoint::InitAsDefaultInstance() {
}

Waypoint::Waypoint(const Waypoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Waypoint)
}

void Waypoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bearing_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_of_street_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:valhalla.Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete street_;
  }
  if (side_of_street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete side_of_street_;
  }
  if (this != default_instance_) {
  }
}

void Waypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waypoint_descriptor_;
}

const Waypoint& Waypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Waypoint* Waypoint::default_instance_ = NULL;

Waypoint* Waypoint::New() const {
  return new Waypoint;
}

void Waypoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Waypoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(lat_, lon_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    bearing_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        street_->clear();
      }
    }
    if (has_side_of_street()) {
      if (side_of_street_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        side_of_street_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Waypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lon;
        break;
      }

      // optional float lon = 2;
      case 2: {
        if (tag == 21) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bearing;
        break;
      }

      // optional uint32 bearing = 4;
      case 4: {
        if (tag == 32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bearing_)));
          set_has_bearing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_street;
        break;
      }

      // optional string street = 6;
      case 6: {
        if (tag == 50) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_side_of_street;
        break;
      }

      // optional string side_of_street = 7;
      case 7: {
        if (tag == 58) {
         parse_side_of_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side_of_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->side_of_street().data(), this->side_of_street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "side_of_street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Waypoint)
  return false;
#undef DO_
}

void Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Waypoint)
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lon(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional uint32 bearing = 4;
  if (has_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bearing(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional string street = 6;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->street(), output);
  }

  // optional string side_of_street = 7;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->side_of_street().data(), this->side_of_street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "side_of_street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->side_of_street(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Waypoint)
}

::google::protobuf::uint8* Waypoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Waypoint)
  // optional float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // optional float lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lon(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional uint32 bearing = 4;
  if (has_bearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bearing(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string street = 6;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->street(), target);
  }

  // optional string side_of_street = 7;
  if (has_side_of_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->side_of_street().data(), this->side_of_street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "side_of_street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->side_of_street(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Waypoint)
  return target;
}

int Waypoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 2;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 bearing = 4;
    if (has_bearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bearing());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string street = 6;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

    // optional string side_of_street = 7;
    if (has_side_of_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side_of_street());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Waypoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Waypoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bearing()) {
      set_bearing(from.bearing());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_side_of_street()) {
      set_side_of_street(from.side_of_street());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {

  return true;
}

void Waypoint::Swap(Waypoint* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(type_, other->type_);
    std::swap(bearing_, other->bearing_);
    std::swap(name_, other->name_);
    std::swap(street_, other->street_);
    std::swap(side_of_street_, other->side_of_street_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Waypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Waypoint_descriptor_;
  metadata.reflection = Waypoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoundingBox::kMinLatFieldNumber;
const int BoundingBox::kMinLonFieldNumber;
const int BoundingBox::kMaxLatFieldNumber;
const int BoundingBox::kMaxLonFieldNumber;
#endif  // !_MSC_VER

BoundingBox::BoundingBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.BoundingBox)
}

void BoundingBox::InitAsDefaultInstance() {
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.BoundingBox)
}

void BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  min_lat_ = 0;
  min_lon_ = 0;
  max_lat_ = 0;
  max_lon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:valhalla.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundingBox_descriptor_;
}

const BoundingBox& BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New() const {
  return new BoundingBox;
}

void BoundingBox::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BoundingBox*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_lat_, max_lon_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.BoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_lat = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_lat_)));
          set_has_min_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_min_lon;
        break;
      }

      // optional float min_lon = 2;
      case 2: {
        if (tag == 21) {
         parse_min_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_lon_)));
          set_has_min_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_max_lat;
        break;
      }

      // optional float max_lat = 3;
      case 3: {
        if (tag == 29) {
         parse_max_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_lat_)));
          set_has_max_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_lon;
        break;
      }

      // optional float max_lon = 4;
      case 4: {
        if (tag == 37) {
         parse_max_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_lon_)));
          set_has_max_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.BoundingBox)
  return false;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.BoundingBox)
  // optional float min_lat = 1;
  if (has_min_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_lat(), output);
  }

  // optional float min_lon = 2;
  if (has_min_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_lon(), output);
  }

  // optional float max_lat = 3;
  if (has_max_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_lat(), output);
  }

  // optional float max_lon = 4;
  if (has_max_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_lon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.BoundingBox)
}

::google::protobuf::uint8* BoundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.BoundingBox)
  // optional float min_lat = 1;
  if (has_min_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_lat(), target);
  }

  // optional float min_lon = 2;
  if (has_min_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_lon(), target);
  }

  // optional float max_lat = 3;
  if (has_max_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_lat(), target);
  }

  // optional float max_lon = 4;
  if (has_max_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_lon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.BoundingBox)
  return target;
}

int BoundingBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float min_lat = 1;
    if (has_min_lat()) {
      total_size += 1 + 4;
    }

    // optional float min_lon = 2;
    if (has_min_lon()) {
      total_size += 1 + 4;
    }

    // optional float max_lat = 3;
    if (has_max_lat()) {
      total_size += 1 + 4;
    }

    // optional float max_lon = 4;
    if (has_max_lon()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoundingBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoundingBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_lat()) {
      set_min_lat(from.min_lat());
    }
    if (from.has_min_lon()) {
      set_min_lon(from.min_lon());
    }
    if (from.has_max_lat()) {
      set_max_lat(from.max_lat());
    }
    if (from.has_max_lon()) {
      set_max_lon(from.max_lon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {

  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other != this) {
    std::swap(min_lat_, other->min_lat_);
    std::swap(min_lon_, other->min_lon_);
    std::swap(max_lat_, other->max_lat_);
    std::swap(max_lon_, other->max_lon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundingBox_descriptor_;
  metadata.reflection = BoundingBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreetName::kTextFieldNumber;
const int StreetName::kIsRouteNumberFieldNumber;
#endif  // !_MSC_VER

StreetName::StreetName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.StreetName)
}

void StreetName::InitAsDefaultInstance() {
}

StreetName::StreetName(const StreetName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.StreetName)
}

void StreetName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_route_number_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetName::~StreetName() {
  // @@protoc_insertion_point(destructor:valhalla.StreetName)
  SharedDtor();
}

void StreetName::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void StreetName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetName_descriptor_;
}

const StreetName& StreetName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

StreetName* StreetName::default_instance_ = NULL;

StreetName* StreetName::New() const {
  return new StreetName;
}

void StreetName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    is_route_number_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreetName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.StreetName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_route_number;
        break;
      }

      // optional bool is_route_number = 2;
      case 2: {
        if (tag == 16) {
         parse_is_route_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_route_number_)));
          set_has_is_route_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.StreetName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.StreetName)
  return false;
#undef DO_
}

void StreetName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.StreetName)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool is_route_number = 2;
  if (has_is_route_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_route_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.StreetName)
}

::google::protobuf::uint8* StreetName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.StreetName)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool is_route_number = 2;
  if (has_is_route_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_route_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.StreetName)
  return target;
}

int StreetName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool is_route_number = 2;
    if (has_is_route_number()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreetName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreetName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreetName::MergeFrom(const StreetName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_is_route_number()) {
      set_is_route_number(from.is_route_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreetName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetName::CopyFrom(const StreetName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetName::IsInitialized() const {

  return true;
}

void StreetName::Swap(StreetName* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(is_route_number_, other->is_route_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreetName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetName_descriptor_;
  metadata.reflection = StreetName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Step::kDistanceFieldNumber;
const int Step::kDurationFieldNumber;
const int Step::kGeometryIndexBeginFieldNumber;
const int Step::kGeometryIndexEndFieldNumber;
const int Step::kIncomingManeuverIndexFieldNumber;
const int Step::kOutgoingManeuverIndexFieldNumber;
const int Step::kStreetNamesFieldNumber;
const int Step::kTravelModeFieldNumber;
const int Step::kTravelModeTypeFieldNumber;
const int Step::kDrivingSideFieldNumber;
#endif  // !_MSC_VER

Step::Step()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Step)
}

void Step::InitAsDefaultInstance() {
}

Step::Step(const Step& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Step)
}

void Step::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  distance_ = 0;
  duration_ = 0u;
  geometry_index_begin_ = 0u;
  geometry_index_end_ = 0u;
  incoming_maneuver_index_ = 0u;
  outgoing_maneuver_index_ = 0u;
  travel_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  travel_mode_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driving_side_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Step::~Step() {
  // @@protoc_insertion_point(destructor:valhalla.Step)
  SharedDtor();
}

void Step::SharedDtor() {
  if (travel_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete travel_mode_;
  }
  if (travel_mode_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete travel_mode_type_;
  }
  if (driving_side_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete driving_side_;
  }
  if (this != default_instance_) {
  }
}

void Step::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Step::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Step_descriptor_;
}

const Step& Step::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Step* Step::default_instance_ = NULL;

Step* Step::New() const {
  return new Step;
}

void Step::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Step*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(distance_, outgoing_maneuver_index_);
    if (has_travel_mode()) {
      if (travel_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        travel_mode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_travel_mode_type()) {
      if (travel_mode_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        travel_mode_type_->clear();
      }
    }
    if (has_driving_side()) {
      if (driving_side_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        driving_side_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  street_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Step::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Step)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float distance = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_geometry_index_begin;
        break;
      }

      // optional uint32 geometry_index_begin = 3;
      case 3: {
        if (tag == 24) {
         parse_geometry_index_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geometry_index_begin_)));
          set_has_geometry_index_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_geometry_index_end;
        break;
      }

      // optional uint32 geometry_index_end = 4;
      case 4: {
        if (tag == 32) {
         parse_geometry_index_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geometry_index_end_)));
          set_has_geometry_index_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_incoming_maneuver_index;
        break;
      }

      // optional uint32 incoming_maneuver_index = 5;
      case 5: {
        if (tag == 40) {
         parse_incoming_maneuver_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_maneuver_index_)));
          set_has_incoming_maneuver_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_outgoing_maneuver_index;
        break;
      }

      // optional uint32 outgoing_maneuver_index = 6;
      case 6: {
        if (tag == 48) {
         parse_outgoing_maneuver_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outgoing_maneuver_index_)));
          set_has_outgoing_maneuver_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_street_names;
        break;
      }

      // repeated .valhalla.StreetName street_names = 7;
      case 7: {
        if (tag == 58) {
         parse_street_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_street_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_street_names;
        if (input->ExpectTag(66)) goto parse_travel_mode;
        break;
      }

      // optional string travel_mode = 8;
      case 8: {
        if (tag == 66) {
         parse_travel_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_travel_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->travel_mode().data(), this->travel_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "travel_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_travel_mode_type;
        break;
      }

      // optional string travel_mode_type = 9;
      case 9: {
        if (tag == 74) {
         parse_travel_mode_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_travel_mode_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->travel_mode_type().data(), this->travel_mode_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "travel_mode_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_driving_side;
        break;
      }

      // optional string driving_side = 10;
      case 10: {
        if (tag == 82) {
         parse_driving_side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driving_side()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->driving_side().data(), this->driving_side().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "driving_side");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Step)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Step)
  return false;
#undef DO_
}

void Step::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Step)
  // optional float distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance(), output);
  }

  // optional uint32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // optional uint32 geometry_index_begin = 3;
  if (has_geometry_index_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->geometry_index_begin(), output);
  }

  // optional uint32 geometry_index_end = 4;
  if (has_geometry_index_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->geometry_index_end(), output);
  }

  // optional uint32 incoming_maneuver_index = 5;
  if (has_incoming_maneuver_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->incoming_maneuver_index(), output);
  }

  // optional uint32 outgoing_maneuver_index = 6;
  if (has_outgoing_maneuver_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->outgoing_maneuver_index(), output);
  }

  // repeated .valhalla.StreetName street_names = 7;
  for (int i = 0; i < this->street_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->street_names(i), output);
  }

  // optional string travel_mode = 8;
  if (has_travel_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->travel_mode().data(), this->travel_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "travel_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->travel_mode(), output);
  }

  // optional string travel_mode_type = 9;
  if (has_travel_mode_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->travel_mode_type().data(), this->travel_mode_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "travel_mode_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->travel_mode_type(), output);
  }

  // optional string driving_side = 10;
  if (has_driving_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driving_side().data(), this->driving_side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "driving_side");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->driving_side(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Step)
}

::google::protobuf::uint8* Step::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Step)
  // optional float distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distance(), target);
  }

  // optional uint32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // optional uint32 geometry_index_begin = 3;
  if (has_geometry_index_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->geometry_index_begin(), target);
  }

  // optional uint32 geometry_index_end = 4;
  if (has_geometry_index_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->geometry_index_end(), target);
  }

  // optional uint32 incoming_maneuver_index = 5;
  if (has_incoming_maneuver_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->incoming_maneuver_index(), target);
  }

  // optional uint32 outgoing_maneuver_index = 6;
  if (has_outgoing_maneuver_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->outgoing_maneuver_index(), target);
  }

  // repeated .valhalla.StreetName street_names = 7;
  for (int i = 0; i < this->street_names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->street_names(i), target);
  }

  // optional string travel_mode = 8;
  if (has_travel_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->travel_mode().data(), this->travel_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "travel_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->travel_mode(), target);
  }

  // optional string travel_mode_type = 9;
  if (has_travel_mode_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->travel_mode_type().data(), this->travel_mode_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "travel_mode_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->travel_mode_type(), target);
  }

  // optional string driving_side = 10;
  if (has_driving_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->driving_side().data(), this->driving_side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "driving_side");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->driving_side(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Step)
  return target;
}

int Step::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float distance = 1;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional uint32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 geometry_index_begin = 3;
    if (has_geometry_index_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->geometry_index_begin());
    }

    // optional uint32 geometry_index_end = 4;
    if (has_geometry_index_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->geometry_index_end());
    }

    // optional uint32 incoming_maneuver_index = 5;
    if (has_incoming_maneuver_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incoming_maneuver_index());
    }

    // optional uint32 outgoing_maneuver_index = 6;
    if (has_outgoing_maneuver_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outgoing_maneuver_index());
    }

    // optional string travel_mode = 8;
    if (has_travel_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->travel_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string travel_mode_type = 9;
    if (has_travel_mode_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->travel_mode_type());
    }

    // optional string driving_side = 10;
    if (has_driving_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driving_side());
    }

  }
  // repeated .valhalla.StreetName street_names = 7;
  total_size += 1 * this->street_names_size();
  for (int i = 0; i < this->street_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->street_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Step::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Step* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Step*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Step::MergeFrom(const Step& from) {
  GOOGLE_CHECK_NE(&from, this);
  street_names_.MergeFrom(from.street_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_geometry_index_begin()) {
      set_geometry_index_begin(from.geometry_index_begin());
    }
    if (from.has_geometry_index_end()) {
      set_geometry_index_end(from.geometry_index_end());
    }
    if (from.has_incoming_maneuver_index()) {
      set_incoming_maneuver_index(from.incoming_maneuver_index());
    }
    if (from.has_outgoing_maneuver_index()) {
      set_outgoing_maneuver_index(from.outgoing_maneuver_index());
    }
    if (from.has_travel_mode()) {
      set_travel_mode(from.travel_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_travel_mode_type()) {
      set_travel_mode_type(from.travel_mode_type());
    }
    if (from.has_driving_side()) {
      set_driving_side(from.driving_side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Step::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Step::CopyFrom(const Step& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Step::IsInitialized() const {

  return true;
}

void Step::Swap(Step* other) {
  if (other != this) {
    std::swap(distance_, other->distance_);
    std::swap(duration_, other->duration_);
    std::swap(geometry_index_begin_, other->geometry_index_begin_);
    std::swap(geometry_index_end_, other->geometry_index_end_);
    std::swap(incoming_maneuver_index_, other->incoming_maneuver_index_);
    std::swap(outgoing_maneuver_index_, other->outgoing_maneuver_index_);
    street_names_.Swap(&other->street_names_);
    std::swap(travel_mode_, other->travel_mode_);
    std::swap(travel_mode_type_, other->travel_mode_type_);
    std::swap(driving_side_, other->driving_side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Step::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Step_descriptor_;
  metadata.reflection = Step_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignElement::kTextFieldNumber;
const int SignElement::kIsRouteNumberFieldNumber;
const int SignElement::kConsecutiveCountFieldNumber;
#endif  // !_MSC_VER

SignElement::SignElement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.SignElement)
}

void SignElement::InitAsDefaultInstance() {
}

SignElement::SignElement(const SignElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.SignElement)
}

void SignElement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_route_number_ = false;
  consecutive_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignElement::~SignElement() {
  // @@protoc_insertion_point(destructor:valhalla.SignElement)
  SharedDtor();
}

void SignElement::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void SignElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignElement_descriptor_;
}

const SignElement& SignElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

SignElement* SignElement::default_instance_ = NULL;

SignElement* SignElement::New() const {
  return new SignElement;
}

void SignElement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignElement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_route_number_, consecutive_count_);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.SignElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_route_number;
        break;
      }

      // optional bool is_route_number = 2;
      case 2: {
        if (tag == 16) {
         parse_is_route_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_route_number_)));
          set_has_is_route_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consecutive_count;
        break;
      }

      // optional uint32 consecutive_count = 3;
      case 3: {
        if (tag == 24) {
         parse_consecutive_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consecutive_count_)));
          set_has_consecutive_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.SignElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.SignElement)
  return false;
#undef DO_
}

void SignElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.SignElement)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool is_route_number = 2;
  if (has_is_route_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_route_number(), output);
  }

  // optional uint32 consecutive_count = 3;
  if (has_consecutive_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->consecutive_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.SignElement)
}

::google::protobuf::uint8* SignElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.SignElement)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool is_route_number = 2;
  if (has_is_route_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_route_number(), target);
  }

  // optional uint32 consecutive_count = 3;
  if (has_consecutive_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->consecutive_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.SignElement)
  return target;
}

int SignElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool is_route_number = 2;
    if (has_is_route_number()) {
      total_size += 1 + 1;
    }

    // optional uint32 consecutive_count = 3;
    if (has_consecutive_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consecutive_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignElement::MergeFrom(const SignElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_is_route_number()) {
      set_is_route_number(from.is_route_number());
    }
    if (from.has_consecutive_count()) {
      set_consecutive_count(from.consecutive_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignElement::CopyFrom(const SignElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignElement::IsInitialized() const {

  return true;
}

void SignElement::Swap(SignElement* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(is_route_number_, other->is_route_number_);
    std::swap(consecutive_count_, other->consecutive_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignElement_descriptor_;
  metadata.reflection = SignElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sign::kExitNumbersFieldNumber;
const int Sign::kExitOntoStreetsFieldNumber;
const int Sign::kExitTowardLocationsFieldNumber;
const int Sign::kExitNamesFieldNumber;
#endif  // !_MSC_VER

Sign::Sign()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Sign)
}

void Sign::InitAsDefaultInstance() {
}

Sign::Sign(const Sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Sign)
}

void Sign::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sign::~Sign() {
  // @@protoc_insertion_point(destructor:valhalla.Sign)
  SharedDtor();
}

void Sign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sign_descriptor_;
}

const Sign& Sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Sign* Sign::default_instance_ = NULL;

Sign* Sign::New() const {
  return new Sign;
}

void Sign::Clear() {
  exit_numbers_.Clear();
  exit_onto_streets_.Clear();
  exit_toward_locations_.Clear();
  exit_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Sign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.SignElement exit_numbers = 1;
      case 1: {
        if (tag == 10) {
         parse_exit_numbers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_numbers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_exit_numbers;
        if (input->ExpectTag(18)) goto parse_exit_onto_streets;
        break;
      }

      // repeated .valhalla.SignElement exit_onto_streets = 2;
      case 2: {
        if (tag == 18) {
         parse_exit_onto_streets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_onto_streets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exit_onto_streets;
        if (input->ExpectTag(26)) goto parse_exit_toward_locations;
        break;
      }

      // repeated .valhalla.SignElement exit_toward_locations = 3;
      case 3: {
        if (tag == 26) {
         parse_exit_toward_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_toward_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_exit_toward_locations;
        if (input->ExpectTag(34)) goto parse_exit_names;
        break;
      }

      // repeated .valhalla.SignElement exit_names = 4;
      case 4: {
        if (tag == 34) {
         parse_exit_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exit_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Sign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Sign)
  return false;
#undef DO_
}

void Sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Sign)
  // repeated .valhalla.SignElement exit_numbers = 1;
  for (int i = 0; i < this->exit_numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exit_numbers(i), output);
  }

  // repeated .valhalla.SignElement exit_onto_streets = 2;
  for (int i = 0; i < this->exit_onto_streets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exit_onto_streets(i), output);
  }

  // repeated .valhalla.SignElement exit_toward_locations = 3;
  for (int i = 0; i < this->exit_toward_locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exit_toward_locations(i), output);
  }

  // repeated .valhalla.SignElement exit_names = 4;
  for (int i = 0; i < this->exit_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exit_names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Sign)
}

::google::protobuf::uint8* Sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Sign)
  // repeated .valhalla.SignElement exit_numbers = 1;
  for (int i = 0; i < this->exit_numbers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exit_numbers(i), target);
  }

  // repeated .valhalla.SignElement exit_onto_streets = 2;
  for (int i = 0; i < this->exit_onto_streets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exit_onto_streets(i), target);
  }

  // repeated .valhalla.SignElement exit_toward_locations = 3;
  for (int i = 0; i < this->exit_toward_locations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exit_toward_locations(i), target);
  }

  // repeated .valhalla.SignElement exit_names = 4;
  for (int i = 0; i < this->exit_names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exit_names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Sign)
  return target;
}

int Sign::ByteSize() const {
  int total_size = 0;

  // repeated .valhalla.SignElement exit_numbers = 1;
  total_size += 1 * this->exit_numbers_size();
  for (int i = 0; i < this->exit_numbers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_numbers(i));
  }

  // repeated .valhalla.SignElement exit_onto_streets = 2;
  total_size += 1 * this->exit_onto_streets_size();
  for (int i = 0; i < this->exit_onto_streets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_onto_streets(i));
  }

  // repeated .valhalla.SignElement exit_toward_locations = 3;
  total_size += 1 * this->exit_toward_locations_size();
  for (int i = 0; i < this->exit_toward_locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_toward_locations(i));
  }

  // repeated .valhalla.SignElement exit_names = 4;
  total_size += 1 * this->exit_names_size();
  for (int i = 0; i < this->exit_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sign::MergeFrom(const Sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  exit_numbers_.MergeFrom(from.exit_numbers_);
  exit_onto_streets_.MergeFrom(from.exit_onto_streets_);
  exit_toward_locations_.MergeFrom(from.exit_toward_locations_);
  exit_names_.MergeFrom(from.exit_names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sign::CopyFrom(const Sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sign::IsInitialized() const {

  return true;
}

void Sign::Swap(Sign* other) {
  if (other != this) {
    exit_numbers_.Swap(&other->exit_numbers_);
    exit_onto_streets_.Swap(&other->exit_onto_streets_);
    exit_toward_locations_.Swap(&other->exit_toward_locations_);
    exit_names_.Swap(&other->exit_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sign_descriptor_;
  metadata.reflection = Sign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lane::kIsValidFieldNumber;
const int Lane::kIndicationsFieldNumber;
#endif  // !_MSC_VER

Lane::Lane()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Lane)
}

void Lane::InitAsDefaultInstance() {
}

Lane::Lane(const Lane& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Lane)
}

void Lane::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:valhalla.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lane_descriptor_;
}

const Lane& Lane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Lane* Lane::default_instance_ = NULL;

Lane* Lane::New() const {
  return new Lane;
}

void Lane::Clear() {
  is_valid_ = false;
  indications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_valid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
          set_has_is_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_indications;
        break;
      }

      // repeated string indications = 2;
      case 2: {
        if (tag == 18) {
         parse_indications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_indications()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->indications(this->indications_size() - 1).data(),
            this->indications(this->indications_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "indications");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_indications;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Lane)
  // optional bool is_valid = 1;
  if (has_is_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_valid(), output);
  }

  // repeated string indications = 2;
  for (int i = 0; i < this->indications_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->indications(i).data(), this->indications(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "indications");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->indications(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Lane)
}

::google::protobuf::uint8* Lane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Lane)
  // optional bool is_valid = 1;
  if (has_is_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_valid(), target);
  }

  // repeated string indications = 2;
  for (int i = 0; i < this->indications_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indications(i).data(), this->indications(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "indications");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->indications(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Lane)
  return target;
}

int Lane::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_valid = 1;
    if (has_is_valid()) {
      total_size += 1 + 1;
    }

  }
  // repeated string indications = 2;
  total_size += 1 * this->indications_size();
  for (int i = 0; i < this->indications_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->indications(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lane* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lane*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
  GOOGLE_CHECK_NE(&from, this);
  indications_.MergeFrom(from.indications_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_valid()) {
      set_is_valid(from.is_valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {

  return true;
}

void Lane::Swap(Lane* other) {
  if (other != this) {
    std::swap(is_valid_, other->is_valid_);
    indications_.Swap(&other->indications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lane_descriptor_;
  metadata.reflection = Lane_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Maneuver::kTypeFieldNumber;
const int Maneuver::kGeometryIndexFieldNumber;
const int Maneuver::kIncomingBearingFieldNumber;
const int Maneuver::kOutgoingBearingFieldNumber;
const int Maneuver::kStreetNamesFieldNumber;
const int Maneuver::kSignFieldNumber;
const int Maneuver::kLaneFieldNumber;
const int Maneuver::kIsObviousFieldNumber;
const int Maneuver::kIsVerbalMultiCueFieldNumber;
const int Maneuver::kTextInstructionFieldNumber;
const int Maneuver::kVerbalTransitionAlertInstructionFieldNumber;
const int Maneuver::kVerbalPreTransitionInstructionFieldNumber;
const int Maneuver::kVerbalPostTransitionInstructionFieldNumber;
#endif  // !_MSC_VER

Maneuver::Maneuver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Maneuver)
}

void Maneuver::InitAsDefaultInstance() {
  sign_ = const_cast< ::valhalla::Sign*>(&::valhalla::Sign::default_instance());
  lane_ = const_cast< ::valhalla::Lane*>(&::valhalla::Lane::default_instance());
}

Maneuver::Maneuver(const Maneuver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Maneuver)
}

void Maneuver::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geometry_index_ = 0u;
  incoming_bearing_ = 0u;
  outgoing_bearing_ = 0u;
  sign_ = NULL;
  lane_ = NULL;
  is_obvious_ = false;
  is_verbal_multi_cue_ = false;
  text_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verbal_transition_alert_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verbal_pre_transition_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verbal_post_transition_instruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Maneuver::~Maneuver() {
  // @@protoc_insertion_point(destructor:valhalla.Maneuver)
  SharedDtor();
}

void Maneuver::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (text_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_instruction_;
  }
  if (verbal_transition_alert_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verbal_transition_alert_instruction_;
  }
  if (verbal_pre_transition_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verbal_pre_transition_instruction_;
  }
  if (verbal_post_transition_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete verbal_post_transition_instruction_;
  }
  if (this != default_instance_) {
    delete sign_;
    delete lane_;
  }
}

void Maneuver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Maneuver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Maneuver_descriptor_;
}

const Maneuver& Maneuver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Maneuver* Maneuver::default_instance_ = NULL;

Maneuver* Maneuver::New() const {
  return new Maneuver;
}

void Maneuver::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Maneuver*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(geometry_index_, incoming_bearing_);
    ZR_(outgoing_bearing_, is_obvious_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != NULL) sign_->::valhalla::Sign::Clear();
    }
    if (has_lane()) {
      if (lane_ != NULL) lane_->::valhalla::Lane::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    is_verbal_multi_cue_ = false;
    if (has_text_instruction()) {
      if (text_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_instruction_->clear();
      }
    }
    if (has_verbal_transition_alert_instruction()) {
      if (verbal_transition_alert_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verbal_transition_alert_instruction_->clear();
      }
    }
    if (has_verbal_pre_transition_instruction()) {
      if (verbal_pre_transition_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verbal_pre_transition_instruction_->clear();
      }
    }
    if (has_verbal_post_transition_instruction()) {
      if (verbal_post_transition_instruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        verbal_post_transition_instruction_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  street_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Maneuver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Maneuver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_geometry_index;
        break;
      }

      // optional uint32 geometry_index = 2;
      case 2: {
        if (tag == 16) {
         parse_geometry_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geometry_index_)));
          set_has_geometry_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_incoming_bearing;
        break;
      }

      // optional uint32 incoming_bearing = 3;
      case 3: {
        if (tag == 24) {
         parse_incoming_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_bearing_)));
          set_has_incoming_bearing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_outgoing_bearing;
        break;
      }

      // optional uint32 outgoing_bearing = 4;
      case 4: {
        if (tag == 32) {
         parse_outgoing_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outgoing_bearing_)));
          set_has_outgoing_bearing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_street_names;
        break;
      }

      // repeated .valhalla.StreetName street_names = 5;
      case 5: {
        if (tag == 42) {
         parse_street_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_street_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_street_names;
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional .valhalla.Sign sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_lane;
        break;
      }

      // optional .valhalla.Lane lane = 7;
      case 7: {
        if (tag == 58) {
         parse_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_obvious;
        break;
      }

      // optional bool is_obvious = 8;
      case 8: {
        if (tag == 64) {
         parse_is_obvious:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_obvious_)));
          set_has_is_obvious();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_verbal_multi_cue;
        break;
      }

      // optional bool is_verbal_multi_cue = 9;
      case 9: {
        if (tag == 72) {
         parse_is_verbal_multi_cue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verbal_multi_cue_)));
          set_has_is_verbal_multi_cue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_text_instruction;
        break;
      }

      // optional string text_instruction = 10;
      case 10: {
        if (tag == 82) {
         parse_text_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_instruction().data(), this->text_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text_instruction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_verbal_transition_alert_instruction;
        break;
      }

      // optional string verbal_transition_alert_instruction = 11;
      case 11: {
        if (tag == 90) {
         parse_verbal_transition_alert_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_transition_alert_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verbal_transition_alert_instruction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_verbal_pre_transition_instruction;
        break;
      }

      // optional string verbal_pre_transition_instruction = 12;
      case 12: {
        if (tag == 98) {
         parse_verbal_pre_transition_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_pre_transition_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verbal_pre_transition_instruction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_verbal_post_transition_instruction;
        break;
      }

      // optional string verbal_post_transition_instruction = 13;
      case 13: {
        if (tag == 106) {
         parse_verbal_post_transition_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbal_post_transition_instruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verbal_post_transition_instruction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Maneuver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Maneuver)
  return false;
#undef DO_
}

void Maneuver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Maneuver)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional uint32 geometry_index = 2;
  if (has_geometry_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->geometry_index(), output);
  }

  // optional uint32 incoming_bearing = 3;
  if (has_incoming_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->incoming_bearing(), output);
  }

  // optional uint32 outgoing_bearing = 4;
  if (has_outgoing_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->outgoing_bearing(), output);
  }

  // repeated .valhalla.StreetName street_names = 5;
  for (int i = 0; i < this->street_names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->street_names(i), output);
  }

  // optional .valhalla.Sign sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sign(), output);
  }

  // optional .valhalla.Lane lane = 7;
  if (has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lane(), output);
  }

  // optional bool is_obvious = 8;
  if (has_is_obvious()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_obvious(), output);
  }

  // optional bool is_verbal_multi_cue = 9;
  if (has_is_verbal_multi_cue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_verbal_multi_cue(), output);
  }

  // optional string text_instruction = 10;
  if (has_text_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_instruction().data(), this->text_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->text_instruction(), output);
  }

  // optional string verbal_transition_alert_instruction = 11;
  if (has_verbal_transition_alert_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verbal_transition_alert_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->verbal_transition_alert_instruction(), output);
  }

  // optional string verbal_pre_transition_instruction = 12;
  if (has_verbal_pre_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verbal_pre_transition_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->verbal_pre_transition_instruction(), output);
  }

  // optional string verbal_post_transition_instruction = 13;
  if (has_verbal_post_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verbal_post_transition_instruction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->verbal_post_transition_instruction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Maneuver)
}

::google::protobuf::uint8* Maneuver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Maneuver)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional uint32 geometry_index = 2;
  if (has_geometry_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->geometry_index(), target);
  }

  // optional uint32 incoming_bearing = 3;
  if (has_incoming_bearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->incoming_bearing(), target);
  }

  // optional uint32 outgoing_bearing = 4;
  if (has_outgoing_bearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->outgoing_bearing(), target);
  }

  // repeated .valhalla.StreetName street_names = 5;
  for (int i = 0; i < this->street_names_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->street_names(i), target);
  }

  // optional .valhalla.Sign sign = 6;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sign(), target);
  }

  // optional .valhalla.Lane lane = 7;
  if (has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lane(), target);
  }

  // optional bool is_obvious = 8;
  if (has_is_obvious()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_obvious(), target);
  }

  // optional bool is_verbal_multi_cue = 9;
  if (has_is_verbal_multi_cue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_verbal_multi_cue(), target);
  }

  // optional string text_instruction = 10;
  if (has_text_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_instruction().data(), this->text_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text_instruction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text_instruction(), target);
  }

  // optional string verbal_transition_alert_instruction = 11;
  if (has_verbal_transition_alert_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbal_transition_alert_instruction().data(), this->verbal_transition_alert_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verbal_transition_alert_instruction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->verbal_transition_alert_instruction(), target);
  }

  // optional string verbal_pre_transition_instruction = 12;
  if (has_verbal_pre_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbal_pre_transition_instruction().data(), this->verbal_pre_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verbal_pre_transition_instruction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->verbal_pre_transition_instruction(), target);
  }

  // optional string verbal_post_transition_instruction = 13;
  if (has_verbal_post_transition_instruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbal_post_transition_instruction().data(), this->verbal_post_transition_instruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verbal_post_transition_instruction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->verbal_post_transition_instruction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Maneuver)
  return target;
}

int Maneuver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 geometry_index = 2;
    if (has_geometry_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->geometry_index());
    }

    // optional uint32 incoming_bearing = 3;
    if (has_incoming_bearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incoming_bearing());
    }

    // optional uint32 outgoing_bearing = 4;
    if (has_outgoing_bearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outgoing_bearing());
    }

    // optional .valhalla.Sign sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

    // optional .valhalla.Lane lane = 7;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane());
    }

    // optional bool is_obvious = 8;
    if (has_is_obvious()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_verbal_multi_cue = 9;
    if (has_is_verbal_multi_cue()) {
      total_size += 1 + 1;
    }

    // optional string text_instruction = 10;
    if (has_text_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_instruction());
    }

    // optional string verbal_transition_alert_instruction = 11;
    if (has_verbal_transition_alert_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_transition_alert_instruction());
    }

    // optional string verbal_pre_transition_instruction = 12;
    if (has_verbal_pre_transition_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_pre_transition_instruction());
    }

    // optional string verbal_post_transition_instruction = 13;
    if (has_verbal_post_transition_instruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbal_post_transition_instruction());
    }

  }
  // repeated .valhalla.StreetName street_names = 5;
  total_size += 1 * this->street_names_size();
  for (int i = 0; i < this->street_names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->street_names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Maneuver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Maneuver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Maneuver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Maneuver::MergeFrom(const Maneuver& from) {
  GOOGLE_CHECK_NE(&from, this);
  street_names_.MergeFrom(from.street_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_geometry_index()) {
      set_geometry_index(from.geometry_index());
    }
    if (from.has_incoming_bearing()) {
      set_incoming_bearing(from.incoming_bearing());
    }
    if (from.has_outgoing_bearing()) {
      set_outgoing_bearing(from.outgoing_bearing());
    }
    if (from.has_sign()) {
      mutable_sign()->::valhalla::Sign::MergeFrom(from.sign());
    }
    if (from.has_lane()) {
      mutable_lane()->::valhalla::Lane::MergeFrom(from.lane());
    }
    if (from.has_is_obvious()) {
      set_is_obvious(from.is_obvious());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_verbal_multi_cue()) {
      set_is_verbal_multi_cue(from.is_verbal_multi_cue());
    }
    if (from.has_text_instruction()) {
      set_text_instruction(from.text_instruction());
    }
    if (from.has_verbal_transition_alert_instruction()) {
      set_verbal_transition_alert_instruction(from.verbal_transition_alert_instruction());
    }
    if (from.has_verbal_pre_transition_instruction()) {
      set_verbal_pre_transition_instruction(from.verbal_pre_transition_instruction());
    }
    if (from.has_verbal_post_transition_instruction()) {
      set_verbal_post_transition_instruction(from.verbal_post_transition_instruction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Maneuver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Maneuver::CopyFrom(const Maneuver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Maneuver::IsInitialized() const {

  return true;
}

void Maneuver::Swap(Maneuver* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(geometry_index_, other->geometry_index_);
    std::swap(incoming_bearing_, other->incoming_bearing_);
    std::swap(outgoing_bearing_, other->outgoing_bearing_);
    street_names_.Swap(&other->street_names_);
    std::swap(sign_, other->sign_);
    std::swap(lane_, other->lane_);
    std::swap(is_obvious_, other->is_obvious_);
    std::swap(is_verbal_multi_cue_, other->is_verbal_multi_cue_);
    std::swap(text_instruction_, other->text_instruction_);
    std::swap(verbal_transition_alert_instruction_, other->verbal_transition_alert_instruction_);
    std::swap(verbal_pre_transition_instruction_, other->verbal_pre_transition_instruction_);
    std::swap(verbal_post_transition_instruction_, other->verbal_post_transition_instruction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Maneuver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Maneuver_descriptor_;
  metadata.reflection = Maneuver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Leg::kSummaryFieldNumber;
const int Leg::kDistanceFieldNumber;
const int Leg::kDurationFieldNumber;
const int Leg::kBoundingBoxFieldNumber;
const int Leg::kGeometryFieldNumber;
const int Leg::kStepsFieldNumber;
const int Leg::kManeuversFieldNumber;
#endif  // !_MSC_VER

Leg::Leg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Leg)
}

void Leg::InitAsDefaultInstance() {
  bounding_box_ = const_cast< ::valhalla::BoundingBox*>(&::valhalla::BoundingBox::default_instance());
}

Leg::Leg(const Leg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Leg)
}

void Leg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
  duration_ = 0u;
  bounding_box_ = NULL;
  geometry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Leg::~Leg() {
  // @@protoc_insertion_point(destructor:valhalla.Leg)
  SharedDtor();
}

void Leg::SharedDtor() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (geometry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete geometry_;
  }
  if (this != default_instance_) {
    delete bounding_box_;
  }
}

void Leg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Leg_descriptor_;
}

const Leg& Leg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Leg* Leg::default_instance_ = NULL;

Leg* Leg::New() const {
  return new Leg;
}

void Leg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Leg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(distance_, duration_);
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_bounding_box()) {
      if (bounding_box_ != NULL) bounding_box_->::valhalla::BoundingBox::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        geometry_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  steps_.Clear();
  maneuvers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Leg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Leg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_distance;
        break;
      }

      // optional float distance = 2;
      case 2: {
        if (tag == 21) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 3;
      case 3: {
        if (tag == 24) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bounding_box;
        break;
      }

      // optional .valhalla.BoundingBox bounding_box = 4;
      case 4: {
        if (tag == 34) {
         parse_bounding_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_geometry;
        break;
      }

      // optional string geometry = 5;
      case 5: {
        if (tag == 42) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geometry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geometry().data(), this->geometry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geometry");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_steps;
        break;
      }

      // repeated .valhalla.Step steps = 6;
      case 6: {
        if (tag == 50) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_steps;
        if (input->ExpectTag(58)) goto parse_maneuvers;
        break;
      }

      // repeated .valhalla.Maneuver maneuvers = 7;
      case 7: {
        if (tag == 58) {
         parse_maneuvers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maneuvers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_maneuvers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Leg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Leg)
  return false;
#undef DO_
}

void Leg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Leg)
  // optional string summary = 1;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->summary(), output);
  }

  // optional float distance = 2;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  // optional uint32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional .valhalla.BoundingBox bounding_box = 4;
  if (has_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bounding_box(), output);
  }

  // optional string geometry = 5;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geometry().data(), this->geometry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geometry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->geometry(), output);
  }

  // repeated .valhalla.Step steps = 6;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->steps(i), output);
  }

  // repeated .valhalla.Maneuver maneuvers = 7;
  for (int i = 0; i < this->maneuvers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->maneuvers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Leg)
}

::google::protobuf::uint8* Leg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Leg)
  // optional string summary = 1;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->summary(), target);
  }

  // optional float distance = 2;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  // optional uint32 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional .valhalla.BoundingBox bounding_box = 4;
  if (has_bounding_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bounding_box(), target);
  }

  // optional string geometry = 5;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geometry().data(), this->geometry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geometry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->geometry(), target);
  }

  // repeated .valhalla.Step steps = 6;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->steps(i), target);
  }

  // repeated .valhalla.Maneuver maneuvers = 7;
  for (int i = 0; i < this->maneuvers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->maneuvers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Leg)
  return target;
}

int Leg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string summary = 1;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional float distance = 2;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional .valhalla.BoundingBox bounding_box = 4;
    if (has_bounding_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounding_box());
    }

    // optional string geometry = 5;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geometry());
    }

  }
  // repeated .valhalla.Step steps = 6;
  total_size += 1 * this->steps_size();
  for (int i = 0; i < this->steps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steps(i));
  }

  // repeated .valhalla.Maneuver maneuvers = 7;
  total_size += 1 * this->maneuvers_size();
  for (int i = 0; i < this->maneuvers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maneuvers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Leg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Leg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Leg::MergeFrom(const Leg& from) {
  GOOGLE_CHECK_NE(&from, this);
  steps_.MergeFrom(from.steps_);
  maneuvers_.MergeFrom(from.maneuvers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_bounding_box()) {
      mutable_bounding_box()->::valhalla::BoundingBox::MergeFrom(from.bounding_box());
    }
    if (from.has_geometry()) {
      set_geometry(from.geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Leg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leg::CopyFrom(const Leg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leg::IsInitialized() const {

  return true;
}

void Leg::Swap(Leg* other) {
  if (other != this) {
    std::swap(summary_, other->summary_);
    std::swap(distance_, other->distance_);
    std::swap(duration_, other->duration_);
    std::swap(bounding_box_, other->bounding_box_);
    std::swap(geometry_, other->geometry_);
    steps_.Swap(&other->steps_);
    maneuvers_.Swap(&other->maneuvers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Leg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Leg_descriptor_;
  metadata.reflection = Leg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Route::kDistanceFieldNumber;
const int Route::kDurationFieldNumber;
const int Route::kBoundingBoxFieldNumber;
const int Route::kLegsFieldNumber;
#endif  // !_MSC_VER

Route::Route()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Route)
}

void Route::InitAsDefaultInstance() {
  bounding_box_ = const_cast< ::valhalla::BoundingBox*>(&::valhalla::BoundingBox::default_instance());
}

Route::Route(const Route& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Route)
}

void Route::SharedCtor() {
  _cached_size_ = 0;
  distance_ = 0;
  duration_ = 0u;
  bounding_box_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:valhalla.Route)
  SharedDtor();
}

void Route::SharedDtor() {
  if (this != default_instance_) {
    delete bounding_box_;
  }
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Route_descriptor_;
}

const Route& Route::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Route* Route::default_instance_ = NULL;

Route* Route::New() const {
  return new Route;
}

void Route::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Route*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(distance_, duration_);
    if (has_bounding_box()) {
      if (bounding_box_ != NULL) bounding_box_->::valhalla::BoundingBox::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  legs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float distance = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bounding_box;
        break;
      }

      // optional .valhalla.BoundingBox bounding_box = 3;
      case 3: {
        if (tag == 26) {
         parse_bounding_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_legs;
        break;
      }

      // repeated .valhalla.Leg legs = 4;
      case 4: {
        if (tag == 34) {
         parse_legs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_legs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Route)
  // optional float distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance(), output);
  }

  // optional uint32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // optional .valhalla.BoundingBox bounding_box = 3;
  if (has_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bounding_box(), output);
  }

  // repeated .valhalla.Leg legs = 4;
  for (int i = 0; i < this->legs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->legs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Route)
}

::google::protobuf::uint8* Route::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Route)
  // optional float distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distance(), target);
  }

  // optional uint32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // optional .valhalla.BoundingBox bounding_box = 3;
  if (has_bounding_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bounding_box(), target);
  }

  // repeated .valhalla.Leg legs = 4;
  for (int i = 0; i < this->legs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->legs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Route)
  return target;
}

int Route::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float distance = 1;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional uint32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional .valhalla.BoundingBox bounding_box = 3;
    if (has_bounding_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounding_box());
    }

  }
  // repeated .valhalla.Leg legs = 4;
  total_size += 1 * this->legs_size();
  for (int i = 0; i < this->legs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->legs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Route* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Route*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
  GOOGLE_CHECK_NE(&from, this);
  legs_.MergeFrom(from.legs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_bounding_box()) {
      mutable_bounding_box()->::valhalla::BoundingBox::MergeFrom(from.bounding_box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {

  return true;
}

void Route::Swap(Route* other) {
  if (other != this) {
    std::swap(distance_, other->distance_);
    std::swap(duration_, other->duration_);
    std::swap(bounding_box_, other->bounding_box_);
    legs_.Swap(&other->legs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Route_descriptor_;
  metadata.reflection = Route_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Directions::kWaypointsFieldNumber;
const int Directions::kRoutesFieldNumber;
const int Directions::kBoundingBoxFieldNumber;
const int Directions::kLanguageCodeFieldNumber;
const int Directions::kUnitsFieldNumber;
const int Directions::kStatusCodeFieldNumber;
const int Directions::kStatusMessageFieldNumber;
const int Directions::kUuidFieldNumber;
#endif  // !_MSC_VER

Directions::Directions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Directions)
}

void Directions::InitAsDefaultInstance() {
  bounding_box_ = const_cast< ::valhalla::BoundingBox*>(&::valhalla::BoundingBox::default_instance());
}

Directions::Directions(const Directions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Directions)
}

void Directions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bounding_box_ = NULL;
  language_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0u;
  status_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Directions::~Directions() {
  // @@protoc_insertion_point(destructor:valhalla.Directions)
  SharedDtor();
}

void Directions::SharedDtor() {
  if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_code_;
  }
  if (units_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete units_;
  }
  if (status_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_message_;
  }
  if (this != default_instance_) {
    delete bounding_box_;
  }
}

void Directions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Directions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Directions_descriptor_;
}

const Directions& Directions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

Directions* Directions::default_instance_ = NULL;

Directions* Directions::New() const {
  return new Directions;
}

void Directions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Directions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(status_code_, uuid_);
    if (has_bounding_box()) {
      if (bounding_box_ != NULL) bounding_box_->::valhalla::BoundingBox::Clear();
    }
    if (has_language_code()) {
      if (language_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_code_->clear();
      }
    }
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        units_->clear();
      }
    }
    if (has_status_message()) {
      if (status_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        status_message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  waypoints_.Clear();
  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Directions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Directions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.Waypoint waypoints = 1;
      case 1: {
        if (tag == 10) {
         parse_waypoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_waypoints;
        if (input->ExpectTag(18)) goto parse_routes;
        break;
      }

      // repeated .valhalla.Route routes = 2;
      case 2: {
        if (tag == 18) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_routes;
        if (input->ExpectTag(26)) goto parse_bounding_box;
        break;
      }

      // optional .valhalla.BoundingBox bounding_box = 3;
      case 3: {
        if (tag == 26) {
         parse_bounding_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_language_code;
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (tag == 34) {
         parse_language_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_units;
        break;
      }

      // optional string units = 5;
      case 5: {
        if (tag == 42) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "units");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status_code;
        break;
      }

      // optional uint32 status_code = 6;
      case 6: {
        if (tag == 48) {
         parse_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_status_message;
        break;
      }

      // optional string status_message = 7;
      case 7: {
        if (tag == 58) {
         parse_status_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_message().data(), this->status_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_uuid;
        break;
      }

      // optional uint32 uuid = 8;
      case 8: {
        if (tag == 64) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Directions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Directions)
  return false;
#undef DO_
}

void Directions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Directions)
  // repeated .valhalla.Waypoint waypoints = 1;
  for (int i = 0; i < this->waypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->waypoints(i), output);
  }

  // repeated .valhalla.Route routes = 2;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routes(i), output);
  }

  // optional .valhalla.BoundingBox bounding_box = 3;
  if (has_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bounding_box(), output);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  // optional string units = 5;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->units(), output);
  }

  // optional uint32 status_code = 6;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status_code(), output);
  }

  // optional string status_message = 7;
  if (has_status_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->status_message(), output);
  }

  // optional uint32 uuid = 8;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:valhalla.Directions)
}

::google::protobuf::uint8* Directions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Directions)
  // repeated .valhalla.Waypoint waypoints = 1;
  for (int i = 0; i < this->waypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->waypoints(i), target);
  }

  // repeated .valhalla.Route routes = 2;
  for (int i = 0; i < this->routes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->routes(i), target);
  }

  // optional .valhalla.BoundingBox bounding_box = 3;
  if (has_bounding_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bounding_box(), target);
  }

  // optional string language_code = 4;
  if (has_language_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  // optional string units = 5;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->units(), target);
  }

  // optional uint32 status_code = 6;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status_code(), target);
  }

  // optional string status_message = 7;
  if (has_status_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->status_message(), target);
  }

  // optional uint32 uuid = 8;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Directions)
  return target;
}

int Directions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .valhalla.BoundingBox bounding_box = 3;
    if (has_bounding_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounding_box());
    }

    // optional string language_code = 4;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional string units = 5;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional uint32 status_code = 6;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }

    // optional string status_message = 7;
    if (has_status_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_message());
    }

    // optional uint32 uuid = 8;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid());
    }

  }
  // repeated .valhalla.Waypoint waypoints = 1;
  total_size += 1 * this->waypoints_size();
  for (int i = 0; i < this->waypoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->waypoints(i));
  }

  // repeated .valhalla.Route routes = 2;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Directions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Directions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Directions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Directions::MergeFrom(const Directions& from) {
  GOOGLE_CHECK_NE(&from, this);
  waypoints_.MergeFrom(from.waypoints_);
  routes_.MergeFrom(from.routes_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_bounding_box()) {
      mutable_bounding_box()->::valhalla::BoundingBox::MergeFrom(from.bounding_box());
    }
    if (from.has_language_code()) {
      set_language_code(from.language_code());
    }
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_status_message()) {
      set_status_message(from.status_message());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Directions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Directions::CopyFrom(const Directions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directions::IsInitialized() const {

  return true;
}

void Directions::Swap(Directions* other) {
  if (other != this) {
    waypoints_.Swap(&other->waypoints_);
    routes_.Swap(&other->routes_);
    std::swap(bounding_box_, other->bounding_box_);
    std::swap(language_code_, other->language_code_);
    std::swap(units_, other->units_);
    std::swap(status_code_, other->status_code_);
    std::swap(status_message_, other->status_message_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Directions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Directions_descriptor_;
  metadata.reflection = Directions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
